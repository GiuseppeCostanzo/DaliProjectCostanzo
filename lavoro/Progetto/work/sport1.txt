:- dynamic saldo/2.
:- dynamic coda/2.
:- dynamic inizio/1.
:- dynamic scrittoBenvenuto/1.

saldo(client1,500).
saldo(client2,400).
coda(0,0).
inizio(falso).
scrittoBenvenuto(falso).

messaggioInizio :- inizio(falso),scrittoBenvenuto(falso).
messaggioInizioI :> write('Sono lo sportellista, attendo che qualcuno venga ad effettuare una operazione'),nl,retract(scrittoBenvenuto(falso)),assert(scrittoBenvenuto(vero)).
aggiorna_clienti_attesaE(A,P) :> assert(coda(A,P)),retract(inizio(falso)),assert(inizio(vero)).

prelievoE(A,D) :> write('Salve quanto deve prelevare '),write(D),write('?'),messageA(A,send_message(quantoPrelievo,Me)),nl.
pagamentoE(B,E) :> write('Salve quanto deve pagare '),write(E),write('?'),messageA(B,send_message(quantoPagamento,Me)),nl.
depositoE(C,F) :> write('Salve quanto deve depositare '),write(F),write('?'),messageA(C,send_message(quantoDeposito,Me)),nl.

prelevareE(C,Q) :> saldo(_,X),(Q > X -> write('Mi spiace ma non puo prelevare piu di quanto tiene depositato');
					write('Il prelievo e andato a buon fine'),nl,aggiorna_saldo(C,Q)).

pagareE(C,Q) :> saldo(_,X),(Q > X -> write('Mi spiace ma non puo utilizzare piu di quanto tiene depositato');
				write('Il pagamento e andato a buon fine'),nl,aggiorna_saldo(C,Q)).

aggiorna_saldo(C,Q):> retract(saldo(C, OldSaldo)), NewSaldo is OldSaldo - Q, assert(saldo(C, NewSaldo)),write('Il SALDO aggiornato e '),write(NewSaldo),nl.


depositareE(C,Q) :> write('Bene, lei ha appena depositato sul suo conto '),write(Q),write(' euro'),nl,aggiorna_deposito(C,Q).
aggiorna_deposito(C,Q):> retract(saldo(C, OldSaldo)), NewSaldo is OldSaldo + Q, assert(saldo(C, NewSaldo)),write('Il nuovo saldo e '),write(NewSaldo),nl.


/*da aggiustare qui*/
sportellista_chiama :- inizio(vero).
sportellista_chiamaI :> trova_minimo_nome(next_client),messageA(next_client,send_message(sportellista_chiama,Me)),write('Il prossimo e '),write(next_client),nl.


trova_minimo_nome(NomeMin) :- findall(Nome-Id, (coda(Nome, Id), Id > 0), ListaFatti),trova_minimo_id(ListaFatti, 9999, _, NomeMin).
trova_minimo_id([Nome-Id | Resto], IdAttuale, NomeAttuale, NomeMin) :-
    (Id < IdAttuale ->
        trova_minimo_id(Resto, Id, Nome, NomeMin);
        trova_minimo_id(Resto, IdAttuale, NomeAttuale, NomeMin)).
trova_minimo_id([], _, NomeMin, NomeMin).
